1)Java Program to count the total number of characters in a string
solution:
import java.util.Scanner;
public class CharacterCount {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a string:");
        String inputString = scanner.nextLine();
        int charCount = 0;
        for (int i = 0; i < inputString.length(); i++) {
            if (inputString.charAt(i) != ' ') { // Exclude spaces from counting
                charCount++;
            }
        }
         System.out.println("Total number of characters in the string: " + charCount);
        }
}
2)Java Program to Count the Total Number of Punctuation Characters Exists in a String
solu:
import java.util.Scanner;
class Main{
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the String");
        String s=sc.nextLine();
        int count=0;
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(isPunctuate(ch)){
                count++;
            }
        }
        System.out.println("Total no of punctuations are:"+count);
    }
    public static boolean isPunctuate(char ch){
        return (ch == '!' || ch == '\"' || ch == '#' || ch == '$' || ch == '%' || ch == '&' || 
                ch == '\'' || ch == '(' || ch == ')' || ch == '*' || ch == '+' || ch == ',' || 
                ch == '-' || ch == '.' || ch == '/' || ch == ':' || ch == ';' || ch == '<' || 
                ch == '=' || ch == '>' || ch == '?' || ch == '@' || ch == '[' || ch == '\\' || 
                ch == ']' || ch == '^' || ch == '_' || ch == '`' || ch == '{' || ch == '|' || 
                ch == '}' || ch == '~');
    }
    
}
3)Java Program to count the total number of vowels and consonants in a string
sol:
import java.util.Scanner;
public class Main {
	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		System.out.println("Enter the String");
		String s=scan.nextLine().toLowerCase();
		int vowels=0;
		int consonants=0;
		for(int i=0;i<s.length();i++) {
			char ch=s.charAt(i);
			if(Character.isLetter(ch)) {
				if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u') {
				vowels++;
				}
				else{
				consonants++;
			}
		}
	  }
		System.out.println("Total no of vowels:"+vowels);
		System.out.println("Total no of Consonants:"+consonants);
  }
}
4)Java Program to determine whether two strings are the anagram
sol:
import java.util.*;
public class Anagram {
	public static boolean isAnagram(String str1,String str2) {
		str1=str1.replaceAll("\\s","").toLowerCase();
		str2=str2.replaceAll("\\s","").toLowerCase();
		if(str1.length()!=str2.length()) {
			return false;
		}
		char[] ch1=str1.toCharArray();
		char[] ch2=str2.toCharArray();
		Arrays.sort(ch1);
		Arrays.sort(ch2);
		return Arrays.equals(ch1, ch2);
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the First String");
		String str1=sc.next();
		System.out.println("Enter the Second String");
		String str2=sc.next();
		boolean isAnagram=isAnagram(str1, str2);
		boolean samecharacters=str1.equalsIgnoreCase(str2);
		if(isAnagram&&!samecharacters){
			System.out.println("Anagram");
		}else {
			System.out.println("Not a Anagram");
		}
	}
}
5)Java Program to divide a string in 'N' equal parts
sol:
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the string:");
        String input = scanner.nextLine();
        System.out.println("Enter the number of parts to divide the string into:");
        int parts = scanner.nextInt();
        if (input.length() % parts != 0) {
            System.out.println("Cannot divide the string into equal parts.");
            return;
        }
        int partLength = input.length() / parts;
        int startIndex = 0;
        int endIndex = partLength;
        System.out.println("Dividing the string into " + parts + " equal parts:");
        for (int i = 0; i < parts; i++) {
            String part = input.substring(startIndex, endIndex);
            System.out.println("Part " + (i + 1) + ": " + part);
            startIndex = endIndex;
            endIndex += partLength;
        }
    }
}
6)Java Program to find all subsets of a string
sol:
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String s = scanner.nextLine();
        for (int i = 0; i < s.length(); i++) {
            for (int j = i + 1; j <= s.length(); j++) {
                System.out.println(s.substring(i, j));
            }
        }
   }
}
7)Java Program to find the longest repeating sequence in a string
sol:
import java.util.Scanner;
public class LongestSequence {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String s = scanner.nextLine();
        // Find and print the longest repeating sequence
        String longestRepeatingSequence = findLongestRepeatingSequence(s);
        System.out.println("Longest Repeating Sequence: " + longestRepeatingSequence);
      }
      public static String findLongestRepeatingSequence(String str) {
        int n = str.length();
        String longestSeq = "";
        // Iterate over all substrings
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int length = 0;
                 // Compare substrings starting at i and j
                while (j + length < n && str.charAt(i + length) == str.charAt(j + length)) {
                    length++;
                }
                  // Update longestSeq if a longer repeating sequence is found
                if (length > longestSeq.length()) {
                    longestSeq = str.substring(i, i + length);
                }
            }
        }
       return longestSeq;
    }
}
8)Java Program to find all the permutations of a string
sol:
import java.util.*;
public class Permutations {
	static void permutations(char[] ar,int fi) {
		if(fi==ar.length-1) {
			System.out.println(ar);
			return ;
		}
		for(int i=fi;i<ar.length;i++) {
			swap(ar,i,fi);
			permutations(ar,fi+1);
			swap(ar,i,fi);
		}
	}
   static void swap(char[] ar,int i,int fi) {
	   char temp=ar[i];
	   ar[i]=ar[fi];
	   ar[fi]=temp;
   }
public static void main(String[] args) {
    Scanner scn = new Scanner(System.in);
    System.out.print("Enter string to generate its permutations: ");
    String str = scn.next(); //String input from the user
    permutations(str.toCharArray(), 0);
  }
  }
9)Java Program to remove all the white spaces from a string
sol:
import java.util.Scanner;

public class RemoveWhiteSpaces {
    public static void main(String[] args) {
        // Create a Scanner object for reading user input
        Scanner scanner = new Scanner(System.in);
        
        // Prompt the user to enter a string
        System.out.println("Enter a string:");
        String input = scanner.nextLine();
        
        // Remove all white spaces using replaceAll method
        String result = input.replaceAll("\\s+", "");
        
        // Print the result
        System.out.println("String after removing white spaces: \"" + result + "\"");
        
        // Close the scanner
        scanner.close();
    }
}
10)Java Program to replace lower-case characters with upper-case and vice-versa
sol:
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
     Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a string:");
        String input = scanner.nextLine();
        String converted = convertCase(input);
        System.out.println("Original:"+input);
        System.out.println("Converted:"+converted);
 }
  public static String convertCase(String input) {
        char[] ch = input.toCharArray();
        for (int i = 0; i < ch.length; i++) {
            char c = ch[i];
            if (Character.isUpperCase(c)) {
                ch[i] = Character.toLowerCase(c);
            } else if (Character.isLowerCase(c)) {
                ch[i] = Character.toUpperCase(c);
            }
        }
        return new String(ch);
    }
}
11)Java Program to replace the spaces of a string with a specific character
sol:
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
         System.out.println("Enter a string:");
        String input = scanner.nextLine();
        System.out.println("Enter the character to replace spaces with:");
        char ch = scanner.next().charAt(0);
        String replacedString = replaceSpaces(input,ch);
        System.out.println("String with spaces replaced:");
        System.out.println(replacedString);
    }
     public static String replaceSpaces(String str, char ch) {
        return str.replace(' ', ch);
    }
}
12)Java Program to determine whether a given string is palindrome or Reverse a String Both are same.
sol:
import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	System.out.println("Enter the String:");
	String s =sc.next();
	String rev="";
	for(int i=s.length()-1;i>=0;i--){
	    rev=rev+s.charAt(i);
	}
	if(rev.equals(s)){
	    System.out.println("Yes");
	}else{
	System.out.println("No");
	}
}
}
13)Java Program to determine whether one string is a rotation of another
sol:
import java.util.Scanner;
public class Main
{
    public static boolean isRotation(String s1,String s2){
        if(s1.length()!=s2.length()||s1.length()==0){
            return false;
        }
        String concatenated=s1+s1;
        return concatenated.contains(s2);
    }
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the first String:");
	    String s1=sc.nextLine();
	    System.out.println("Enter the Second String:");
	    String s2=sc.nextLine();
	    if(isRotation(s1,s2)){
	        System.out.println(s2+" is a rotaion of "+s1);
	    }else{
	        System.out.println(s2+" is not a rotation of "+s1);
	    }
	}
}
14)Java Program to find maximum and minimum occurring character in a string.
sol)
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
public class CharacterOccurrence {
       public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String str = scanner.nextLine();
       Map<Character, Integer> charCount = new HashMap<>();
        // Count occurrences of each character in the string
        for (char c : str.toCharArray()) {
            if (Character.isLetter(c)) {
                charCount.put(c, charCount.getOrDefault(c, 0) + 1);
            }
        }
        // Find the maximum occurring character
        char maxChar = 0;
        int maxCount = Integer.MIN_VALUE;
        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                maxChar = entry.getKey();
            }
        }
         // Find the minimum occurring character
        char minChar = 0;
        int minCount = Integer.MAX_VALUE;
        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
            if (entry.getValue() < minCount) {
                minCount = entry.getValue();
                minChar = entry.getKey();
            }
        }
        System.out.println("Maximum occurring character: " + maxChar);
        System.out.println("Minimum occurring character: " + minChar);
    }
}






